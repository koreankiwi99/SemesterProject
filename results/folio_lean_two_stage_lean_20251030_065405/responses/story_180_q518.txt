Story ID: 180
Example ID: 518
Premises: Sam is doing a project.
A project is written either in C++ or Python.
If Sam does a project written in Python, he will not use a Mac.
Sam is using a Mac.
If Sam uses a Mac, he will play a song.
If a song is not titled "Perfect," Sam will never play it.
Conclusion: The project Sam is doing is written in C++.

==================================================
Iteration 1
==================================================
STAGE 1: Natural language reasoning

- Premise: Sam is doing a project.
- Premise: The project is written either in C++ or Python. So WrittenCpp ∨ WrittenPy.
- Premise: If Sam does a project written in Python, he will not use a Mac. Given we know Sam is doing the project, this means: if the project is Python, then ¬Mac.
- Premise: Sam is using a Mac. So Mac.
- From the disjunction (C++ ∨ Python), proceed by cases:
  - Case 1: The project is written in C++. Then we are done.
  - Case 2: The project is written in Python. Since Sam is doing this project and it is Python, by modus ponens we get ¬Mac. But we also have Mac. This is a contradiction. Therefore the Python case is impossible.
- By disjunction elimination, the only remaining possibility is that the project is written in C++.
- Notes: The premises about playing a song and the “Perfect” title are not needed to reach the conclusion, though from Mac and “Mac → plays a song” one could infer Sam plays some song, and from “if Sam plays a song then it is titled Perfect,” that any song he plays is titled Perfect.

STAGE 2: Lean 4 formalization and proof

<lean>
axiom Person : Type
axiom Project : Type
axiom Song : Type

axiom Sam : Person
axiom proj : Project

axiom Doing : Person → Project → Prop
axiom WrittenCpp : Project → Prop
axiom WrittenPy : Project → Prop
axiom Mac : Person → Prop
axiom Plays : Person → Song → Prop
axiom Perfect : Song → Prop

-- Premises
axiom premise1 : Doing Sam proj
axiom premise2 : WrittenCpp proj ∨ WrittenPy proj
axiom premise3 : (Doing Sam proj ∧ WrittenPy proj) → ¬ Mac Sam
axiom premise4 : Mac Sam
axiom premise5 : Mac Sam → ∃ s : Song, Plays Sam s
axiom premise6 : ∀ s : Song, Plays Sam s → Perfect s

theorem goal : WrittenCpp proj := by
  cases premise2 with
  | inl hcpp => exact hcpp
  | inr hpy =>
      have hnotmac : ¬ Mac Sam := premise3 ⟨premise1, hpy⟩
      have : False := hnotmac premise4
      exact False.elim this
</lean>

ANSWER: True

--- Lean Code ---
axiom Person : Type
axiom Project : Type
axiom Song : Type

axiom Sam : Person
axiom proj : Project

axiom Doing : Person → Project → Prop
axiom WrittenCpp : Project → Prop
axiom WrittenPy : Project → Prop
axiom Mac : Person → Prop
axiom Plays : Person → Song → Prop
axiom Perfect : Song → Prop

-- Premises
axiom premise1 : Doing Sam proj
axiom premise2 : WrittenCpp proj ∨ WrittenPy proj
axiom premise3 : (Doing Sam proj ∧ WrittenPy proj) → ¬ Mac Sam
axiom premise4 : Mac Sam
axiom premise5 : Mac Sam → ∃ s : Song, Plays Sam s
axiom premise6 : ∀ s : Song, Plays Sam s → Perfect s

theorem goal : WrittenCpp proj := by
  cases premise2 with
  | inl hcpp => exact hcpp
  | inr hpy =>
      have hnotmac : ¬ Mac Sam := premise3 ⟨premise1, hpy⟩
      have : False := hnotmac premise4
      exact False.elim this

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: True
Prediction: True
Correct: Yes
Total Iterations: 1
