Story ID: 120
Example ID: 361
Premises: Badults is a British Sitcom series starring members of Pappy's.
Badults was piloted in July 2013 on BBC Three.
The Working title "The Secret Dude Society" was used for Badults.
Andrew Collins was the script editor for Badults.
Conclusion: No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.

==================================================
Iteration 1
==================================================
<lean>
axiom Person : Type
axiom Show : Type
axiom Title : Type

-- Entities and predicates
axiom PappysMember : Person → Prop
axiom StarsIn : Person → Show → Prop
axiom BritishSitcom : Show → Prop
axiom WorkingTitleFor : Show → Title → Prop
axiom ScriptEditor : Person → Show → Prop

-- Specific constants
axiom Badults : Show
axiom TheSecretDudeSociety : Title
axiom AndrewCollins : Person

-- Pilot channels
axiom PilotedOnBBCTwo : Show → Prop
axiom PilotedOnBBCThree : Show → Prop

-- Contextual premises
axiom badults_stars_pappys : ∃ p : Person, PappysMember p ∧ StarsIn p Badults
axiom badults_piloted_bbc_three : PilotedOnBBCThree Badults
axiom badults_is_british_sitcom : BritishSitcom Badults
axiom badults_working_title : WorkingTitleFor Badults TheSecretDudeSociety
axiom collins_script_editor : ScriptEditor AndrewCollins Badults

-- The claim to evaluate:
-- "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three."
def Claim : Prop :=
  ∀ p s, PappysMember p → StarsIn p s → (PilotedOnBBCTwo s ∨ PilotedOnBBCThree s) → False

-- We prove the negation of the claim using the given context.
theorem not_Claim : ¬ Claim := by
  intro h
  cases badults_stars_pappys with
  | intro p hp =>
    have hp_mem : PappysMember p := hp.left
    have hp_star : StarsIn p Badults := hp.right
    have piloted : PilotedOnBBCTwo Badults ∨ PilotedOnBBCThree Badults :=
      Or.inr badults_piloted_bbc_three
    exact h p Badults hp_mem hp_star piloted

-- Optional: provide a concrete counterexample witnessing the negation.
theorem counterexample_exists :
  ∃ p s, PappysMember p ∧ StarsIn p s ∧ (PilotedOnBBCTwo s ∨ PilotedOnBBCThree s) := by
  cases badults_stars_pappys with
  | intro p hp =>
    exact ⟨p, Badults, hp.left, hp.right, Or.inr badults_piloted_bbc_three⟩
</lean>
ANSWER: False

--- Lean Code ---
axiom Person : Type
axiom Show : Type
axiom Title : Type

-- Entities and predicates
axiom PappysMember : Person → Prop
axiom StarsIn : Person → Show → Prop
axiom BritishSitcom : Show → Prop
axiom WorkingTitleFor : Show → Title → Prop
axiom ScriptEditor : Person → Show → Prop

-- Specific constants
axiom Badults : Show
axiom TheSecretDudeSociety : Title
axiom AndrewCollins : Person

-- Pilot channels
axiom PilotedOnBBCTwo : Show → Prop
axiom PilotedOnBBCThree : Show → Prop

-- Contextual premises
axiom badults_stars_pappys : ∃ p : Person, PappysMember p ∧ StarsIn p Badults
axiom badults_piloted_bbc_three : PilotedOnBBCThree Badults
axiom badults_is_british_sitcom : BritishSitcom Badults
axiom badults_working_title : WorkingTitleFor Badults TheSecretDudeSociety
axiom collins_script_editor : ScriptEditor AndrewCollins Badults

-- The claim to evaluate:
-- "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three."
def Claim : Prop :=
  ∀ p s, PappysMember p → StarsIn p s → (PilotedOnBBCTwo s ∨ PilotedOnBBCThree s) → False

-- We prove the negation of the claim using the given context.
theorem not_Claim : ¬ Claim := by
  intro h
  cases badults_stars_pappys with
  | intro p hp =>
    have hp_mem : PappysMember p := hp.left
    have hp_star : StarsIn p Badults := hp.right
    have piloted : PilotedOnBBCTwo Badults ∨ PilotedOnBBCThree Badults :=
      Or.inr badults_piloted_bbc_three
    exact h p Badults hp_mem hp_star piloted

-- Optional: provide a concrete counterexample witnessing the negation.
theorem counterexample_exists :
  ∃ p s, PappysMember p ∧ StarsIn p s ∧ (PilotedOnBBCTwo s ∨ PilotedOnBBCThree s) := by
  cases badults_stars_pappys with
  | intro p hp =>
    exact ⟨p, Badults, hp.left, hp.right, Or.inr badults_piloted_bbc_three⟩

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: False
Prediction: False
Correct: Yes
Total Iterations: 1
