Story ID: 166
Example ID: 478
Premises: Pets are allowed in some managed buildings.
A deposit is required to rent an apartment in a managed building.
The security deposit can be either equal to the monthly rent at a managed building or more.
Fluffy is Tom's cat.
Cats are pets.
The Olive Garden is a managed building.
The monthly rent at the Olive Garden is $2000.
$2000 is more than $1500.
Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.
If a managed building allows pets, then people are allowed to move in with a pet. 
Conclusion: The security deposit at the Olive Garden is either $2000 or more.

==================================================
Iteration 1
==================================================
<lean>
/- Domain setup -/
axiom Building : Type
axiom Person : Type
axiom Animal : Type

axiom Managed : Building → Prop
axiom PetsAllowed : Building → Prop
axiom MonthlyRent : Building → Nat
axiom SecurityDeposit : Building → Nat

axiom Pet : Animal → Prop
axiom Cat : Animal → Prop
axiom ownerOf : Animal → Person → Prop
axiom AllowedToMoveInWithPet : Person → Animal → Building → Prop
axiom RentApartment : Person → Building → Prop
axiom DepositRequired : Building → Prop

/- Constants from the story -/
axiom Tom : Person
axiom Fluffy : Animal
axiom OliveGarden : Building

/- Premises from the text -/
-- Pets are allowed in some managed buildings.
axiom some_managed_allows_pets : ∃ b : Building, Managed b ∧ PetsAllowed b

-- A deposit is required to rent an apartment in a managed building.
axiom deposit_required_in_managed : ∀ b : Building, Managed b → DepositRequired b

-- The security deposit can be either equal to the monthly rent at a managed building or more.
axiom deposit_eq_rent_or_more :
  ∀ b : Building, Managed b → (SecurityDeposit b = MonthlyRent b ∨ SecurityDeposit b > MonthlyRent b)

-- Fluffy is Tom's cat.
axiom fluffy_is_toms_cat : Cat Fluffy ∧ ownerOf Fluffy Tom

-- Cats are pets.
axiom cats_are_pets : ∀ a : Animal, Cat a → Pet a

-- The Olive Garden is a managed building.
axiom managed_OG : Managed OliveGarden

-- The monthly rent at the Olive Garden is $2000.
axiom rent_OG_2000 : MonthlyRent OliveGarden = 2000

-- $2000 is more than $1500.
axiom two_thousand_gt_fifteen_hundred : 1500 < 2000

-- Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy,
-- and the security deposit is no more than $1500.
axiom tom_rents_if_allowed_and_deposit_le_1500 :
  ∀ b : Building, Managed b → AllowedToMoveInWithPet Tom Fluffy b → SecurityDeposit b ≤ 1500 → RentApartment Tom b

-- If a managed building allows pets, then people are allowed to move in with a pet.
axiom managed_allows_pets_implies_people_allowed_with_pet :
  ∀ (p : Person) (a : Animal) (b : Building),
    Managed b → PetsAllowed b → Pet a → AllowedToMoveInWithPet p a b

/- Goal: The security deposit at the Olive Garden is either $2000 or more. -/
theorem security_deposit_OG_is_2000_or_more :
  SecurityDeposit OliveGarden = 2000 ∨ SecurityDeposit OliveGarden > 2000 := by
  have h := deposit_eq_rent_or_more OliveGarden managed_OG
  have hr : MonthlyRent OliveGarden = 2000 := rent_OG_2000
  cases h with
  | inl hEq =>
      exact Or.inl (by simpa [hr] using hEq)
  | inr hGt =>
      exact Or.inr (by simpa [hr] using hGt)
</lean>
ANSWER: True

--- Lean Code ---
/- Domain setup -/
axiom Building : Type
axiom Person : Type
axiom Animal : Type

axiom Managed : Building → Prop
axiom PetsAllowed : Building → Prop
axiom MonthlyRent : Building → Nat
axiom SecurityDeposit : Building → Nat

axiom Pet : Animal → Prop
axiom Cat : Animal → Prop
axiom ownerOf : Animal → Person → Prop
axiom AllowedToMoveInWithPet : Person → Animal → Building → Prop
axiom RentApartment : Person → Building → Prop
axiom DepositRequired : Building → Prop

/- Constants from the story -/
axiom Tom : Person
axiom Fluffy : Animal
axiom OliveGarden : Building

/- Premises from the text -/
-- Pets are allowed in some managed buildings.
axiom some_managed_allows_pets : ∃ b : Building, Managed b ∧ PetsAllowed b

-- A deposit is required to rent an apartment in a managed building.
axiom deposit_required_in_managed : ∀ b : Building, Managed b → DepositRequired b

-- The security deposit can be either equal to the monthly rent at a managed building or more.
axiom deposit_eq_rent_or_more :
  ∀ b : Building, Managed b → (SecurityDeposit b = MonthlyRent b ∨ SecurityDeposit b > MonthlyRent b)

-- Fluffy is Tom's cat.
axiom fluffy_is_toms_cat : Cat Fluffy ∧ ownerOf Fluffy Tom

-- Cats are pets.
axiom cats_are_pets : ∀ a : Animal, Cat a → Pet a

-- The Olive Garden is a managed building.
axiom managed_OG : Managed OliveGarden

-- The monthly rent at the Olive Garden is $2000.
axiom rent_OG_2000 : MonthlyRent OliveGarden = 2000

-- $2000 is more than $1500.
axiom two_thousand_gt_fifteen_hundred : 1500 < 2000

-- Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy,
-- and the security deposit is no more than $1500.
axiom tom_rents_if_allowed_and_deposit_le_1500 :
  ∀ b : Building, Managed b → AllowedToMoveInWithPet Tom Fluffy b → SecurityDeposit b ≤ 1500 → RentApartment Tom b

-- If a managed building allows pets, then people are allowed to move in with a pet.
axiom managed_allows_pets_implies_people_allowed_with_pet :
  ∀ (p : Person) (a : Animal) (b : Building),
    Managed b → PetsAllowed b → Pet a → AllowedToMoveInWithPet p a b

/- Goal: The security deposit at the Olive Garden is either $2000 or more. -/
theorem security_deposit_OG_is_2000_or_more :
  SecurityDeposit OliveGarden = 2000 ∨ SecurityDeposit OliveGarden > 2000 := by
  have h := deposit_eq_rent_or_more OliveGarden managed_OG
  have hr : MonthlyRent OliveGarden = 2000 := rent_OG_2000
  cases h with
  | inl hEq =>
      exact Or.inl (by simpa [hr] using hEq)
  | inr hGt =>
      exact Or.inr (by simpa [hr] using hGt)

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: True
Prediction: True
Correct: Yes
Total Iterations: 1
