Story ID: 183
Example ID: 528
Premises: If a man is taller than another man, the taller one can block the other's shooting.
Michael is a man who is taller than everyone else in his class.
If person x is taller than person y, and person y is taller than person z, then x is taller than z
Peter is a man who is taller than Michael.
Michael can block any shooting from a person as long as the person does not jump when shooting.
Michael cannot block Windy's shooting.
Every shooter who can jump when shooting is a great shooter.
Conclusion: Windy is a great shooter.

==================================================
Iteration 1
==================================================
<lean>
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom InMClass : Person → Prop
axiom Taller : Person → Person → Prop
axiom Blocks : Person → Person → Prop
axiom JumpWhenShooting : Person → Prop
axiom GreatShooter : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom man_taller_blocks : ∀ {x y : Person}, Man x → Man y → Taller x y → Blocks x y

-- Michael is a man who is taller than everyone else in his class.
axiom michael_is_man : Man Michael
axiom michael_taller_than_class : ∀ {y : Person}, InMClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom peter_is_man : Man Peter
axiom peter_taller_than_michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom michael_blocks_non_jumpers : ∀ {p : Person}, ¬ JumpWhenShooting p → Blocks Michael p

-- Michael cannot block Windy's shooting.
axiom michael_cannot_block_windy : ¬ Blocks Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
-- We model this as: can jump when shooting implies being a great shooter.
axiom jump_implies_great : ∀ {p : Person}, JumpWhenShooting p → GreatShooter p

theorem Windy_is_a_great_shooter : GreatShooter Windy := by
  have hjump : JumpWhenShooting Windy := by
    classical
    by_contra hnjump
    have hb : Blocks Michael Windy := michael_blocks_non_jumpers (p := Windy) hnjump
    exact michael_cannot_block_windy hb
  exact jump_implies_great hjump
</lean>
ANSWER: True

--- Lean Code ---
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom InMClass : Person → Prop
axiom Taller : Person → Person → Prop
axiom Blocks : Person → Person → Prop
axiom JumpWhenShooting : Person → Prop
axiom GreatShooter : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom man_taller_blocks : ∀ {x y : Person}, Man x → Man y → Taller x y → Blocks x y

-- Michael is a man who is taller than everyone else in his class.
axiom michael_is_man : Man Michael
axiom michael_taller_than_class : ∀ {y : Person}, InMClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom peter_is_man : Man Peter
axiom peter_taller_than_michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom michael_blocks_non_jumpers : ∀ {p : Person}, ¬ JumpWhenShooting p → Blocks Michael p

-- Michael cannot block Windy's shooting.
axiom michael_cannot_block_windy : ¬ Blocks Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
-- We model this as: can jump when shooting implies being a great shooter.
axiom jump_implies_great : ∀ {p : Person}, JumpWhenShooting p → GreatShooter p

theorem Windy_is_a_great_shooter : GreatShooter Windy := by
  have hjump : JumpWhenShooting Windy := by
    classical
    by_contra hnjump
    have hb : Blocks Michael Windy := michael_blocks_non_jumpers (p := Windy) hnjump
    exact michael_cannot_block_windy hb
  exact jump_implies_great hjump

--- Lean Verification ---
Success: False
Errors:
  - unknown tactic
  - unsolved goals
⊢ JumpWhenShooting Windy
  - unsolved goals
hjump : JumpWhenShooting Windy
⊢ GreatShooter Windy

==================================================
Iteration 2
==================================================
<lean>
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom InMClass : Person → Prop
axiom Taller : Person → Person → Prop
axiom Blocks : Person → Person → Prop
axiom JumpWhenShooting : Person → Prop
axiom GreatShooter : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom man_taller_blocks : ∀ {x y : Person}, Man x → Man y → Taller x y → Blocks x y

-- Michael is a man who is taller than everyone else in his class.
axiom michael_is_man : Man Michael
axiom michael_taller_than_class : ∀ {y : Person}, InMClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom peter_is_man : Man Peter
axiom peter_taller_than_michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom michael_blocks_non_jumpers : ∀ {p : Person}, ¬ JumpWhenShooting p → Blocks Michael p

-- Michael cannot block Windy's shooting.
axiom michael_cannot_block_windy : ¬ Blocks Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jump_implies_great : ∀ {p : Person}, JumpWhenShooting p → GreatShooter p

theorem Windy_is_a_great_shooter : GreatShooter Windy := by
  have h : JumpWhenShooting Windy ∨ ¬ JumpWhenShooting Windy :=
    Classical.em (JumpWhenShooting Windy)
  cases h with
  | inl hjump =>
      exact jump_implies_great hjump
  | inr hnot =>
      have hb : Blocks Michael Windy := michael_blocks_non_jumpers (p := Windy) hnot
      exact False.elim (michael_cannot_block_windy hb)
</lean>
ANSWER: True

--- Lean Code ---
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom InMClass : Person → Prop
axiom Taller : Person → Person → Prop
axiom Blocks : Person → Person → Prop
axiom JumpWhenShooting : Person → Prop
axiom GreatShooter : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom man_taller_blocks : ∀ {x y : Person}, Man x → Man y → Taller x y → Blocks x y

-- Michael is a man who is taller than everyone else in his class.
axiom michael_is_man : Man Michael
axiom michael_taller_than_class : ∀ {y : Person}, InMClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom peter_is_man : Man Peter
axiom peter_taller_than_michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom michael_blocks_non_jumpers : ∀ {p : Person}, ¬ JumpWhenShooting p → Blocks Michael p

-- Michael cannot block Windy's shooting.
axiom michael_cannot_block_windy : ¬ Blocks Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jump_implies_great : ∀ {p : Person}, JumpWhenShooting p → GreatShooter p

theorem Windy_is_a_great_shooter : GreatShooter Windy := by
  have h : JumpWhenShooting Windy ∨ ¬ JumpWhenShooting Windy :=
    Classical.em (JumpWhenShooting Windy)
  cases h with
  | inl hjump =>
      exact jump_implies_great hjump
  | inr hnot =>
      have hb : Blocks Michael Windy := michael_blocks_non_jumpers (p := Windy) hnot
      exact False.elim (michael_cannot_block_windy hb)

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: True
Prediction: True
Correct: Yes
Total Iterations: 2
