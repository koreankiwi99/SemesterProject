Story ID: 330
Example ID: 849
Premises: All people who make wedding plans are people who are engaged.
All people who invite others to come to their ceremony make wedding plans.
Anyone who has a well-attended wedding invites others to come to their ceremony.
Some people that have well-attended weddings have larger families.
If John is engaged, then John does not invite friends to their ceremony and make wedding plans.
If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. 
Conclusion: John neither has a larger family nor does he invite others to his wedding.

==================================================
Iteration 1
==================================================
<lean>
axiom Person : Type
axiom John : Person

-- Predicates
axiom MakesWeddingPlans : Person → Prop
axiom Engaged : Person → Prop
axiom InvitesOthers : Person → Prop
axiom WellAttendedWedding : Person → Prop
axiom LargerFamily : Person → Prop
axiom InvitesFriends : Person → Prop

-- Premises
axiom all_who_make_plans_are_engaged :
  ∀ x : Person, MakesWeddingPlans x → Engaged x

axiom invite_others_implies_make_plans :
  ∀ x : Person, InvitesOthers x → MakesWeddingPlans x

axiom well_attended_implies_invite_others :
  ∀ x : Person, WellAttendedWedding x → InvitesOthers x

axiom some_well_attended_have_larger_family :
  ∃ x : Person, WellAttendedWedding x ∧ LargerFamily x

axiom john_engaged_implies_not_invitefriends_and_not_makeplans :
  Engaged John → ¬InvitesFriends John ∧ ¬MakesWeddingPlans John

axiom john_largefamily_implies_wellattended_or_invitefriends :
  LargerFamily John → WellAttendedWedding John ∨ InvitesFriends John

-- Derivable consequences
theorem not_invite_others_John : ¬InvitesOthers John := by
  intro hIO
  have hMP : MakesWeddingPlans John :=
    invite_others_implies_make_plans John hIO
  have hEng : Engaged John :=
    all_who_make_plans_are_engaged John hMP
  have hNotMP : ¬MakesWeddingPlans John :=
    (john_engaged_implies_not_invitefriends_and_not_makeplans hEng).2
  exact hNotMP hMP

theorem not_well_attended_John : ¬WellAttendedWedding John := by
  intro hWA
  have hIO : InvitesOthers John :=
    well_attended_implies_invite_others John hWA
  exact not_invite_others_John hIO

-- From LargerFamily John we can only conclude InvitesFriends John (not a contradiction)
theorem largefamily_implies_invitefriends_John :
  LargerFamily John → InvitesFriends John := by
  intro hLF
  have h := john_largefamily_implies_wellattended_or_invitefriends hLF
  cases h with
  | inl hWA =>
      have : False := not_well_attended_John hWA
      exact False.elim this
  | inr hIF => exact hIF
</lean>
ANSWER: Unknown

--- Lean Code ---
axiom Person : Type
axiom John : Person

-- Predicates
axiom MakesWeddingPlans : Person → Prop
axiom Engaged : Person → Prop
axiom InvitesOthers : Person → Prop
axiom WellAttendedWedding : Person → Prop
axiom LargerFamily : Person → Prop
axiom InvitesFriends : Person → Prop

-- Premises
axiom all_who_make_plans_are_engaged :
  ∀ x : Person, MakesWeddingPlans x → Engaged x

axiom invite_others_implies_make_plans :
  ∀ x : Person, InvitesOthers x → MakesWeddingPlans x

axiom well_attended_implies_invite_others :
  ∀ x : Person, WellAttendedWedding x → InvitesOthers x

axiom some_well_attended_have_larger_family :
  ∃ x : Person, WellAttendedWedding x ∧ LargerFamily x

axiom john_engaged_implies_not_invitefriends_and_not_makeplans :
  Engaged John → ¬InvitesFriends John ∧ ¬MakesWeddingPlans John

axiom john_largefamily_implies_wellattended_or_invitefriends :
  LargerFamily John → WellAttendedWedding John ∨ InvitesFriends John

-- Derivable consequences
theorem not_invite_others_John : ¬InvitesOthers John := by
  intro hIO
  have hMP : MakesWeddingPlans John :=
    invite_others_implies_make_plans John hIO
  have hEng : Engaged John :=
    all_who_make_plans_are_engaged John hMP
  have hNotMP : ¬MakesWeddingPlans John :=
    (john_engaged_implies_not_invitefriends_and_not_makeplans hEng).2
  exact hNotMP hMP

theorem not_well_attended_John : ¬WellAttendedWedding John := by
  intro hWA
  have hIO : InvitesOthers John :=
    well_attended_implies_invite_others John hWA
  exact not_invite_others_John hIO

-- From LargerFamily John we can only conclude InvitesFriends John (not a contradiction)
theorem largefamily_implies_invitefriends_John :
  LargerFamily John → InvitesFriends John := by
  intro hLF
  have h := john_largefamily_implies_wellattended_or_invitefriends hLF
  cases h with
  | inl hWA =>
      have : False := not_well_attended_John hWA
      exact False.elim this
  | inr hIF => exact hIF

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: True
Prediction: Unknown
Correct: No
Total Iterations: 1
