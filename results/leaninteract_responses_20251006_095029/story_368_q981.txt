Story ID: 368
Example ID: 981
Premises: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.
If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.
People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.
If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.
If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.
Hannah is at Mary's school.
Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.
Conclusion: Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.

==================================================
Iteration 1
==================================================
<lean>
axiom Person : Type
axiom Hannah : Person

axiom At : Person → Prop
axiom Works : Person → Prop
axiom NeedsMoney : Person → Prop
axiom OrdersTakeout : Person → Prop
axiom EnjoysDining : Person → Prop
axiom SpendsTimeDining : Person → Prop
axiom Picky : Person → Prop

axiom premise_work_need : ∀ x : Person, At x → Works x → NeedsMoney x
axiom premise_order_work : ∀ x : Person, At x → OrdersTakeout x → Works x
axiom premise_order_or_enjoy : ∀ x : Person, At x → (OrdersTakeout x ∨ EnjoysDining x)
axiom premise_enjoy_not_picky : ∀ x : Person, At x → EnjoysDining x → ¬ Picky x
axiom premise_enjoy_spend : ∀ x : Person, At x → EnjoysDining x → SpendsTimeDining x
axiom premise_at_hannah : At Hannah
axiom premise_hannah : Works Hannah ∧ (NeedsMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedsMoney Hannah))

theorem goal :
  At Hannah ∧ (¬ Picky Hannah ∨ (Picky Hannah → SpendsTimeDining Hannah)) := by
  have hAt : At Hannah := premise_at_hannah
  have hWorks : Works Hannah := And.left premise_hannah
  have hNeeds : NeedsMoney Hannah := premise_work_need Hannah hAt hWorks
  have hImp : NeedsMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedsMoney Hannah) := And.right premise_hannah
  have hPair : (¬ Picky Hannah ∧ ¬ NeedsMoney Hannah) := hImp hNeeds
  have hNotPicky : ¬ Picky Hannah := And.left hPair
  exact And.intro hAt (Or.inl hNotPicky)
</lean>
ANSWER: True

--- Lean Code ---
axiom Person : Type
axiom Hannah : Person

axiom At : Person → Prop
axiom Works : Person → Prop
axiom NeedsMoney : Person → Prop
axiom OrdersTakeout : Person → Prop
axiom EnjoysDining : Person → Prop
axiom SpendsTimeDining : Person → Prop
axiom Picky : Person → Prop

axiom premise_work_need : ∀ x : Person, At x → Works x → NeedsMoney x
axiom premise_order_work : ∀ x : Person, At x → OrdersTakeout x → Works x
axiom premise_order_or_enjoy : ∀ x : Person, At x → (OrdersTakeout x ∨ EnjoysDining x)
axiom premise_enjoy_not_picky : ∀ x : Person, At x → EnjoysDining x → ¬ Picky x
axiom premise_enjoy_spend : ∀ x : Person, At x → EnjoysDining x → SpendsTimeDining x
axiom premise_at_hannah : At Hannah
axiom premise_hannah : Works Hannah ∧ (NeedsMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedsMoney Hannah))

theorem goal :
  At Hannah ∧ (¬ Picky Hannah ∨ (Picky Hannah → SpendsTimeDining Hannah)) := by
  have hAt : At Hannah := premise_at_hannah
  have hWorks : Works Hannah := And.left premise_hannah
  have hNeeds : NeedsMoney Hannah := premise_work_need Hannah hAt hWorks
  have hImp : NeedsMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedsMoney Hannah) := And.right premise_hannah
  have hPair : (¬ Picky Hannah ∧ ¬ NeedsMoney Hannah) := hImp hNeeds
  have hNotPicky : ¬ Picky Hannah := And.left hPair
  exact And.intro hAt (Or.inl hNotPicky)

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: False
Prediction: True
Correct: No
Total Iterations: 1
