Story ID: 380
Example ID: 1015
Premises: People in this club who perform in school talent shows often attend and are very engaged with school events.
People in this club either perform in school talent shows often or are inactive and disinterested community members.
People in this club who chaperone high school dances are not students who attend the school.
All people in this club who are inactive and disinterested members of their community chaperone high school dances.
All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. 
Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.
Conclusion: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.

==================================================
Iteration 1
==================================================
<lean>
open Classical

axiom Person : Type
axiom InClub : Person → Prop
axiom PerformOften : Person → Prop
axiom AttendEvents : Person → Prop
axiom InactiveDisinterested : Person → Prop
axiom Chaperone : Person → Prop
axiom StudentAtSchool : Person → Prop
axiom YoungChild : Person → Prop
axiom Teenager : Person → Prop
axiom WishesToFurtherAcademic : Person → Prop
axiom Bonnie : Person

-- Premises from the text
axiom premise1 : ∀ x : Person, InClub x ∧ PerformOften x → AttendEvents x
axiom premise2 : ∀ x : Person, InClub x → (PerformOften x ∨ InactiveDisinterested x)
axiom premise3 : ∀ x : Person, InClub x ∧ Chaperone x → ¬ StudentAtSchool x
axiom premise4 : ∀ x : Person, InClub x ∧ InactiveDisinterested x → Chaperone x
axiom premise5 : ∀ x : Person, InClub x ∧ (YoungChild x ∨ Teenager x) ∧ WishesToFurtherAcademic x → StudentAtSchool x

-- Bonnie is in the club, and either (attends events and is a student) or not (attends events and is not a student)
axiom bonnie_info :
  InClub Bonnie ∧ ((AttendEvents Bonnie ∧ StudentAtSchool Bonnie) ∨ ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie))

-- Goal from the final sentence
theorem goal :
  (((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie ∧ Chaperone Bonnie) ∨
   ¬ ((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie))
  → (StudentAtSchool Bonnie ∨ InactiveDisinterested Bonnie) := by
  intro _
  have hClub : InClub Bonnie := (bonnie_info.left)
  have hNoAttNotStu : ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie) := by
    cases bonnie_info.right with
    | inl h =>
      -- h : AttendEvents Bonnie ∧ StudentAtSchool Bonnie
      intro hcontra
      exact hcontra.right h.right
    | inr h => exact h
  have hDisj := premise2 Bonnie hClub
  cases hDisj with
  | inr hInactive =>
    exact Or.inr hInactive
  | inl hPerf =>
    have hAttend : AttendEvents Bonnie := premise1 Bonnie ⟨hClub, hPerf⟩
    have hStudent : StudentAtSchool Bonnie := by
      by_contra hNotStudent
      exact hNoAttNotStu ⟨hAttend, hNotStudent⟩
    exact Or.inl hStudent
</lean>
ANSWER: True

--- Lean Code ---
open Classical

axiom Person : Type
axiom InClub : Person → Prop
axiom PerformOften : Person → Prop
axiom AttendEvents : Person → Prop
axiom InactiveDisinterested : Person → Prop
axiom Chaperone : Person → Prop
axiom StudentAtSchool : Person → Prop
axiom YoungChild : Person → Prop
axiom Teenager : Person → Prop
axiom WishesToFurtherAcademic : Person → Prop
axiom Bonnie : Person

-- Premises from the text
axiom premise1 : ∀ x : Person, InClub x ∧ PerformOften x → AttendEvents x
axiom premise2 : ∀ x : Person, InClub x → (PerformOften x ∨ InactiveDisinterested x)
axiom premise3 : ∀ x : Person, InClub x ∧ Chaperone x → ¬ StudentAtSchool x
axiom premise4 : ∀ x : Person, InClub x ∧ InactiveDisinterested x → Chaperone x
axiom premise5 : ∀ x : Person, InClub x ∧ (YoungChild x ∨ Teenager x) ∧ WishesToFurtherAcademic x → StudentAtSchool x

-- Bonnie is in the club, and either (attends events and is a student) or not (attends events and is not a student)
axiom bonnie_info :
  InClub Bonnie ∧ ((AttendEvents Bonnie ∧ StudentAtSchool Bonnie) ∨ ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie))

-- Goal from the final sentence
theorem goal :
  (((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie ∧ Chaperone Bonnie) ∨
   ¬ ((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie))
  → (StudentAtSchool Bonnie ∨ InactiveDisinterested Bonnie) := by
  intro _
  have hClub : InClub Bonnie := (bonnie_info.left)
  have hNoAttNotStu : ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie) := by
    cases bonnie_info.right with
    | inl h =>
      -- h : AttendEvents Bonnie ∧ StudentAtSchool Bonnie
      intro hcontra
      exact hcontra.right h.right
    | inr h => exact h
  have hDisj := premise2 Bonnie hClub
  cases hDisj with
  | inr hInactive =>
    exact Or.inr hInactive
  | inl hPerf =>
    have hAttend : AttendEvents Bonnie := premise1 Bonnie ⟨hClub, hPerf⟩
    have hStudent : StudentAtSchool Bonnie := by
      by_contra hNotStudent
      exact hNoAttNotStu ⟨hAttend, hNotStudent⟩
    exact Or.inl hStudent

--- Lean Verification ---
Success: False
Errors:
  - unknown tactic
  - unsolved goals
a✝ :
  (YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie ∧ Chaperone Bonnie ∨
    ¬((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie)
hClub : InClub Bonnie
hNoAttNotStu : ¬(AttendEvents Bonnie ∧ ¬StudentAtSchool Bonnie)
hPerf : PerformOften Bonnie
hAttend : AttendEvents Bonnie
⊢ StudentAtSchool Bonnie
  - unsolved goals
case inl
a✝ :
  (YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie ∧ Chaperone Bonnie ∨
    ¬((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie)
hClub : InClub Bonnie
hNoAttNotStu : ¬(AttendEvents Bonnie ∧ ¬StudentAtSchool Bonnie)
hPerf : PerformOften Bonnie
hAttend : AttendEvents Bonnie
hStudent : StudentAtSchool Bonnie
⊢ StudentAtSchool Bonnie ∨ InactiveDisinterested Bonnie

==================================================
Iteration 2
==================================================
<lean>
open Classical

axiom Person : Type
axiom InClub : Person → Prop
axiom PerformOften : Person → Prop
axiom AttendEvents : Person → Prop
axiom InactiveDisinterested : Person → Prop
axiom Chaperone : Person → Prop
axiom StudentAtSchool : Person → Prop
axiom YoungChild : Person → Prop
axiom Teenager : Person → Prop
axiom WishesToFurtherAcademic : Person → Prop
axiom Bonnie : Person

-- Premises from the text
axiom premise1 : ∀ x : Person, InClub x ∧ PerformOften x → AttendEvents x
axiom premise2 : ∀ x : Person, InClub x → (PerformOften x ∨ InactiveDisinterested x)
axiom premise3 : ∀ x : Person, InClub x ∧ Chaperone x → ¬ StudentAtSchool x
axiom premise4 : ∀ x : Person, InClub x ∧ InactiveDisinterested x → Chaperone x
axiom premise5 : ∀ x : Person, InClub x ∧ (YoungChild x ∨ Teenager x) ∧ WishesToFurtherAcademic x → StudentAtSchool x

-- Bonnie is in the club, and either (attends events and is a student) or not (attends events and is not a student)
axiom bonnie_info :
  InClub Bonnie ∧ ((AttendEvents Bonnie ∧ StudentAtSchool Bonnie) ∨ ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie))

-- Goal from the final sentence
theorem goal :
  (((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie ∧ Chaperone Bonnie) ∨
   ¬ ((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie))
  → (StudentAtSchool Bonnie ∨ InactiveDisinterested Bonnie) := by
  intro _
  have hClub : InClub Bonnie := bonnie_info.left
  have hNoAttNotStu : ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie) :=
    match bonnie_info.right with
    | Or.inl h =>
        -- From StudentAtSchool Bonnie, deduce ¬(Attend ∧ ¬Student)
        fun hcontra => hcontra.right h.right
    | Or.inr h => h
  have hDisj := premise2 Bonnie hClub
  match hDisj with
  | Or.inr hInactive =>
      exact Or.inr hInactive
  | Or.inl hPerf =>
      have hAttend : AttendEvents Bonnie := premise1 Bonnie ⟨hClub, hPerf⟩
      have hStudent : StudentAtSchool Bonnie := by
        by_cases hs : StudentAtSchool Bonnie
        · exact hs
        · exact False.elim (hNoAttNotStu ⟨hAttend, hs⟩)
      exact Or.inl hStudent
</lean>
ANSWER: True

--- Lean Code ---
open Classical

axiom Person : Type
axiom InClub : Person → Prop
axiom PerformOften : Person → Prop
axiom AttendEvents : Person → Prop
axiom InactiveDisinterested : Person → Prop
axiom Chaperone : Person → Prop
axiom StudentAtSchool : Person → Prop
axiom YoungChild : Person → Prop
axiom Teenager : Person → Prop
axiom WishesToFurtherAcademic : Person → Prop
axiom Bonnie : Person

-- Premises from the text
axiom premise1 : ∀ x : Person, InClub x ∧ PerformOften x → AttendEvents x
axiom premise2 : ∀ x : Person, InClub x → (PerformOften x ∨ InactiveDisinterested x)
axiom premise3 : ∀ x : Person, InClub x ∧ Chaperone x → ¬ StudentAtSchool x
axiom premise4 : ∀ x : Person, InClub x ∧ InactiveDisinterested x → Chaperone x
axiom premise5 : ∀ x : Person, InClub x ∧ (YoungChild x ∨ Teenager x) ∧ WishesToFurtherAcademic x → StudentAtSchool x

-- Bonnie is in the club, and either (attends events and is a student) or not (attends events and is not a student)
axiom bonnie_info :
  InClub Bonnie ∧ ((AttendEvents Bonnie ∧ StudentAtSchool Bonnie) ∨ ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie))

-- Goal from the final sentence
theorem goal :
  (((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie ∧ Chaperone Bonnie) ∨
   ¬ ((YoungChild Bonnie ∨ Teenager Bonnie) ∧ WishesToFurtherAcademic Bonnie))
  → (StudentAtSchool Bonnie ∨ InactiveDisinterested Bonnie) := by
  intro _
  have hClub : InClub Bonnie := bonnie_info.left
  have hNoAttNotStu : ¬ (AttendEvents Bonnie ∧ ¬ StudentAtSchool Bonnie) :=
    match bonnie_info.right with
    | Or.inl h =>
        -- From StudentAtSchool Bonnie, deduce ¬(Attend ∧ ¬Student)
        fun hcontra => hcontra.right h.right
    | Or.inr h => h
  have hDisj := premise2 Bonnie hClub
  match hDisj with
  | Or.inr hInactive =>
      exact Or.inr hInactive
  | Or.inl hPerf =>
      have hAttend : AttendEvents Bonnie := premise1 Bonnie ⟨hClub, hPerf⟩
      have hStudent : StudentAtSchool Bonnie := by
        by_cases hs : StudentAtSchool Bonnie
        · exact hs
        · exact False.elim (hNoAttNotStu ⟨hAttend, hs⟩)
      exact Or.inl hStudent

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: True
Prediction: True
Correct: Yes
Total Iterations: 2
