Story ID: 435
Example ID: 1244
Premises: None of the students who currently work in the library are from the computer science department. 
All of the students with part-time jobs offered by the university currently work in the library. 
All of the students who are taking the database course are from the computer science department. 
All of the students taking a class with Professor David are taking the database course. 
All students working in the lab are taking a class with Professor David.
James is a student working in the lab. 
James doesn't work in the lab or have a part-time job offered by the university.
Conclusion: James has a part-time job offered by the university.

==================================================
Iteration 1
==================================================
<lean>
axiom Student : Type

axiom WorksLibrary : Student → Prop
axiom FromCS : Student → Prop
axiom HasUnivPTJ : Student → Prop
axiom TakesDB : Student → Prop
axiom ClassWithDavid : Student → Prop
axiom WorksLab : Student → Prop

axiom James : Student

-- Premises from the text
axiom lib_not_cs : ∀ x : Student, WorksLibrary x → ¬ FromCS x
axiom ptj_implies_lib : ∀ x : Student, HasUnivPTJ x → WorksLibrary x
axiom db_implies_cs : ∀ x : Student, TakesDB x → FromCS x
axiom david_implies_db : ∀ x : Student, ClassWithDavid x → TakesDB x
axiom lab_implies_david : ∀ x : Student, WorksLab x → ClassWithDavid x
axiom james_lab : WorksLab James
axiom james_not_lab_or_not_ptj : ¬ WorksLab James ∨ ¬ HasUnivPTJ James

-- We can derive that James is from the CS department (via lab → David → DB → CS),
-- and that having a university PTJ would force him to be not CS (PTJ → library → ¬CS),
-- hence James cannot have a university PTJ.
theorem not_ptj_james : ¬ HasUnivPTJ James := by
  intro hptj
  have wl : WorksLibrary James := ptj_implies_lib James hptj
  have ncs : ¬ FromCS James := lib_not_cs James wl
  have cd : ClassWithDavid James := lab_implies_david James james_lab
  have db : TakesDB James := david_implies_db James cd
  have cs : FromCS James := db_implies_cs James db
  exact ncs cs
</lean>
ANSWER: False

--- Lean Code ---
axiom Student : Type

axiom WorksLibrary : Student → Prop
axiom FromCS : Student → Prop
axiom HasUnivPTJ : Student → Prop
axiom TakesDB : Student → Prop
axiom ClassWithDavid : Student → Prop
axiom WorksLab : Student → Prop

axiom James : Student

-- Premises from the text
axiom lib_not_cs : ∀ x : Student, WorksLibrary x → ¬ FromCS x
axiom ptj_implies_lib : ∀ x : Student, HasUnivPTJ x → WorksLibrary x
axiom db_implies_cs : ∀ x : Student, TakesDB x → FromCS x
axiom david_implies_db : ∀ x : Student, ClassWithDavid x → TakesDB x
axiom lab_implies_david : ∀ x : Student, WorksLab x → ClassWithDavid x
axiom james_lab : WorksLab James
axiom james_not_lab_or_not_ptj : ¬ WorksLab James ∨ ¬ HasUnivPTJ James

-- We can derive that James is from the CS department (via lab → David → DB → CS),
-- and that having a university PTJ would force him to be not CS (PTJ → library → ¬CS),
-- hence James cannot have a university PTJ.
theorem not_ptj_james : ¬ HasUnivPTJ James := by
  intro hptj
  have wl : WorksLibrary James := ptj_implies_lib James hptj
  have ncs : ¬ FromCS James := lib_not_cs James wl
  have cd : ClassWithDavid James := lab_implies_david James james_lab
  have db : TakesDB James := david_implies_db James cd
  have cs : FromCS James := db_implies_cs James db
  exact ncs cs

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: False
Prediction: False
Correct: Yes
Total Iterations: 1
