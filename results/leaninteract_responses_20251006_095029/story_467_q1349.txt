Story ID: 467
Example ID: 1349
Premises: All of Peter's pets that are mammals are also animals.
All monkeys are mammals. 
Peter's pets are all either monkeys or birds. 
Peter's birds can fly.
All animals that are Peter's pets can breathe.
If Peter's pet can fly, then it has wings.
Rock is Peter's pet.
Rock can fly, or Rock is a bird, or Rock cannot breathe. 
Conclusion: Rock has wings.

==================================================
Iteration 1
==================================================
<lean>
axiom Entity : Type

-- Predicates
axiom Pet : Entity → Prop
axiom Mammal : Entity → Prop
axiom Animal : Entity → Prop
axiom Monkey : Entity → Prop
axiom Bird : Entity → Prop
axiom CanFly : Entity → Prop
axiom CanBreathe : Entity → Prop
axiom HasWings : Entity → Prop

axiom Rock : Entity

-- Premises
axiom a1 : ∀ x : Entity, Pet x ∧ Mammal x → Animal x
axiom a2 : ∀ x : Entity, Monkey x → Mammal x
axiom a3 : ∀ x : Entity, Pet x → (Monkey x ∨ Bird x)
axiom a4 : ∀ x : Entity, Pet x ∧ Bird x → CanFly x
axiom a5 : ∀ x : Entity, Pet x ∧ Animal x → CanBreathe x
axiom a6 : ∀ x : Entity, Pet x ∧ CanFly x → HasWings x
axiom a7 : Pet Rock
axiom a8 : CanFly Rock ∨ Bird Rock ∨ ¬ CanBreathe Rock

theorem goal : HasWings Rock := by
  have hPet : Pet Rock := a7
  have hMB : Monkey Rock ∨ Bird Rock := a3 Rock hPet
  cases a8 with
  | inl hFly =>
      exact a6 Rock ⟨hPet, hFly⟩
  | inr h =>
      cases h with
      | inl hBird =>
          have hCF : CanFly Rock := a4 Rock ⟨hPet, hBird⟩
          exact a6 Rock ⟨hPet, hCF⟩
      | inr hNotBreath =>
          cases hMB with
          | inl hMonkey =>
              have hMammal : Mammal Rock := a2 Rock hMonkey
              have hAnimal : Animal Rock := a1 Rock ⟨hPet, hMammal⟩
              have hCB : CanBreathe Rock := a5 Rock ⟨hPet, hAnimal⟩
              have : False := hNotBreath hCB
              exact False.elim this
          | inr hBird2 =>
              have hCF : CanFly Rock := a4 Rock ⟨hPet, hBird2⟩
              exact a6 Rock ⟨hPet, hCF⟩
</lean>
ANSWER: True

--- Lean Code ---
axiom Entity : Type

-- Predicates
axiom Pet : Entity → Prop
axiom Mammal : Entity → Prop
axiom Animal : Entity → Prop
axiom Monkey : Entity → Prop
axiom Bird : Entity → Prop
axiom CanFly : Entity → Prop
axiom CanBreathe : Entity → Prop
axiom HasWings : Entity → Prop

axiom Rock : Entity

-- Premises
axiom a1 : ∀ x : Entity, Pet x ∧ Mammal x → Animal x
axiom a2 : ∀ x : Entity, Monkey x → Mammal x
axiom a3 : ∀ x : Entity, Pet x → (Monkey x ∨ Bird x)
axiom a4 : ∀ x : Entity, Pet x ∧ Bird x → CanFly x
axiom a5 : ∀ x : Entity, Pet x ∧ Animal x → CanBreathe x
axiom a6 : ∀ x : Entity, Pet x ∧ CanFly x → HasWings x
axiom a7 : Pet Rock
axiom a8 : CanFly Rock ∨ Bird Rock ∨ ¬ CanBreathe Rock

theorem goal : HasWings Rock := by
  have hPet : Pet Rock := a7
  have hMB : Monkey Rock ∨ Bird Rock := a3 Rock hPet
  cases a8 with
  | inl hFly =>
      exact a6 Rock ⟨hPet, hFly⟩
  | inr h =>
      cases h with
      | inl hBird =>
          have hCF : CanFly Rock := a4 Rock ⟨hPet, hBird⟩
          exact a6 Rock ⟨hPet, hCF⟩
      | inr hNotBreath =>
          cases hMB with
          | inl hMonkey =>
              have hMammal : Mammal Rock := a2 Rock hMonkey
              have hAnimal : Animal Rock := a1 Rock ⟨hPet, hMammal⟩
              have hCB : CanBreathe Rock := a5 Rock ⟨hPet, hAnimal⟩
              have : False := hNotBreath hCB
              exact False.elim this
          | inr hBird2 =>
              have hCF : CanFly Rock := a4 Rock ⟨hPet, hBird2⟩
              exact a6 Rock ⟨hPet, hCF⟩

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: True
Prediction: True
Correct: Yes
Total Iterations: 1
