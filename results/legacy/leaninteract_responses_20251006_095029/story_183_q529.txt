Story ID: 183
Example ID: 529
Premises: If a man is taller than another man, the taller one can block the other's shooting.
Michael is a man who is taller than everyone else in his class.
If person x is taller than person y, and person y is taller than person z, then x is taller than z
Peter is a man who is taller than Michael.
Michael can block any shooting from a person as long as the person does not jump when shooting.
Michael cannot block Windy's shooting.
Every shooter who can jump when shooting is a great shooter.
Conclusion: Peter can block Windy's shooting.

==================================================
Iteration 1
==================================================
<lean>
universe u

constant Person : Type
constant Michael Peter Windy : Person

constant Man : Person → Prop
constant Taller : Person → Person → Prop
constant CanBlock : Person → Person → Prop
constant JumpsWhenShooting : Person → Prop
abbrev Jumps := JumpsWhenShooting
constant GreatShooter : Person → Prop
abbrev Great := GreatShooter
constant InClassMichael : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InClassMichael y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

open Classical

-- Some derived consequences from the premises:

-- From being a taller man, Peter can block Michael.
lemma Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting.
lemma Windy_jumps : Jumps Windy := by
  by_contra hNot
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
lemma Windy_is_great : Great Windy := jumpers_are_great Windy_jumps
</lean>
ANSWER: Unknown

--- Lean Code ---
universe u

constant Person : Type
constant Michael Peter Windy : Person

constant Man : Person → Prop
constant Taller : Person → Person → Prop
constant CanBlock : Person → Person → Prop
constant JumpsWhenShooting : Person → Prop
abbrev Jumps := JumpsWhenShooting
constant GreatShooter : Person → Prop
abbrev Great := GreatShooter
constant InClassMichael : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InClassMichael y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

open Classical

-- Some derived consequences from the premises:

-- From being a taller man, Peter can block Michael.
lemma Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting.
lemma Windy_jumps : Jumps Windy := by
  by_contra hNot
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
lemma Windy_is_great : Great Windy := jumpers_are_great Windy_jumps

--- Lean Verification ---
Success: False
Errors:
  - unexpected token ':'; expected command
  - Unknown identifier `JumpsWhenShooting`
  - unexpected token ':'; expected command
  - Unknown identifier `GreatShooter`
  - unexpected token ':'; expected command
  - Function expected at
  Man
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  x
  - Function expected at
  Man
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  y
  - Function expected at
  Taller
but this term has type
  ?m.3

Note: Expected a function because this term is being applied to the argument
  x
  - Function expected at
  CanBlock
but this term has type
  ?m.4

Note: Expected a function because this term is being applied to the argument
  x
  - Function expected at
  Man
but this term has type
  ?m.1

Note: Expected a function because this term is being applied to the argument
  Michael
  - Function expected at
  InClassMichael
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  y
  - Function expected at
  Taller
but this term has type
  ?m.3

Note: Expected a function because this term is being applied to the argument
  Michael
  - Function expected at
  Taller
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  x
  - Function expected at
  Taller
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  y
  - Function expected at
  Taller
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  x
  - Function expected at
  Man
but this term has type
  ?m.1

Note: Expected a function because this term is being applied to the argument
  Peter
  - Function expected at
  Taller
but this term has type
  ?m.1

Note: Expected a function because this term is being applied to the argument
  Peter
  - Function expected at
  Jumps
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  y
  - Function expected at
  CanBlock
but this term has type
  ?m.3

Note: Expected a function because this term is being applied to the argument
  Michael
  - Function expected at
  CanBlock
but this term has type
  ?m.1

Note: Expected a function because this term is being applied to the argument
  Michael
  - Function expected at
  Jumps
but this term has type
  ?m.2

Note: Expected a function because this term is being applied to the argument
  y
  - Function expected at
  Great
but this term has type
  ?m.3

Note: Expected a function because this term is being applied to the argument
  y
  - unexpected identifier; expected command

==================================================
Iteration 2
==================================================
<lean>
axiom Person : Type
axiom Michael Peter Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ (x y : Person), Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ (y : Person), InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ (x y z : Person), Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ (y : Person), ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ (y : Person), Jumps y → Great y

open Classical

-- From being a taller man, Peter can block Michael.
lemma Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men Peter Michael Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting (by contradiction).
lemma Windy_jumps : Jumps Windy := by
  by_contra hNot
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump Windy hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
lemma Windy_is_great : Great Windy :=
  jumpers_are_great Windy Windy_jumps

-- Target statement (not provable from the given premises):
def Target : Prop := CanBlock Peter Windy
</lean>
ANSWER: Unknown

--- Lean Code ---
axiom Person : Type
axiom Michael Peter Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ (x y : Person), Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ (y : Person), InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ (x y z : Person), Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ (y : Person), ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ (y : Person), Jumps y → Great y

open Classical

-- From being a taller man, Peter can block Michael.
lemma Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men Peter Michael Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting (by contradiction).
lemma Windy_jumps : Jumps Windy := by
  by_contra hNot
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump Windy hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
lemma Windy_is_great : Great Windy :=
  jumpers_are_great Windy Windy_jumps

-- Target statement (not provable from the given premises):
def Target : Prop := CanBlock Peter Windy

--- Lean Verification ---
Success: False
Errors:
  - Failed to infer type of binder `Windy`
  - Failed to infer type of binder `Peter`
  - unexpected identifier; expected command
  - Unknown identifier `Peter`
  - Unknown identifier `Windy`

==================================================
Iteration 3
==================================================
<lean>
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

open Classical

-- From being a taller man, Peter can block Michael.
lemma Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting (by contradiction).
lemma Windy_jumps : Jumps Windy := by
  by_contra hNot : ¬ Jumps Windy
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump (y := Windy) hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
lemma Windy_is_great : Great Windy :=
  jumpers_are_great (y := Windy) Windy_jumps

-- We cannot derive CanBlock Peter Windy from the given premises.
</lean>
ANSWER: Unknown

--- Lean Code ---
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

open Classical

-- From being a taller man, Peter can block Michael.
lemma Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting (by contradiction).
lemma Windy_jumps : Jumps Windy := by
  by_contra hNot : ¬ Jumps Windy
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump (y := Windy) hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
lemma Windy_is_great : Great Windy :=
  jumpers_are_great (y := Windy) Windy_jumps

-- We cannot derive CanBlock Peter Windy from the given premises.

--- Lean Verification ---
Success: False
Errors:
  - unexpected identifier; expected command

==================================================
Iteration 4
==================================================
<lean>
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

-- From being a taller man, Peter can block Michael.
theorem Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting (by contradiction).
theorem Windy_jumps : Jumps Windy := by
  classical
  by_contra hNot
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump (y := Windy) hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
theorem Windy_is_great : Great Windy :=
  jumpers_are_great (y := Windy) Windy_jumps
</lean>
ANSWER: Unknown

--- Lean Code ---
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

-- From being a taller man, Peter can block Michael.
theorem Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael

-- From Michael not being able to block Windy and "non-jumpers are blockable by Michael",
-- it follows that Windy jumps when shooting (by contradiction).
theorem Windy_jumps : Jumps Windy := by
  classical
  by_contra hNot
  have hBlock : CanBlock Michael Windy := Michael_blocks_if_not_jump (y := Windy) hNot
  exact Michael_cannot_block_Windy hBlock

-- Therefore Windy is a great shooter.
theorem Windy_is_great : Great Windy :=
  jumpers_are_great (y := Windy) Windy_jumps

--- Lean Verification ---
Success: False
Errors:
  - unknown tactic
  - unsolved goals
⊢ Jumps Windy

==================================================
Iteration 5
==================================================
<lean>
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

-- From being a taller man, Peter can block Michael.
theorem Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael
</lean>
ANSWER: Unknown

--- Lean Code ---
axiom Person : Type
axiom Michael : Person
axiom Peter : Person
axiom Windy : Person

axiom Man : Person → Prop
axiom Taller : Person → Person → Prop
axiom CanBlock : Person → Person → Prop
axiom Jumps : Person → Prop
axiom Great : Person → Prop
axiom InMichaelClass : Person → Prop

-- If a man is taller than another man, the taller one can block the other's shooting.
axiom rule_block_if_taller_men :
  ∀ {x y : Person}, Man x → Man y → Taller x y → CanBlock x y

-- Michael is a man who is taller than everyone else in his class.
axiom Michael_man : Man Michael
axiom Michael_taller_classmates : ∀ {y : Person}, InMichaelClass y → Taller Michael y

-- If x is taller than y and y is taller than z, then x is taller than z.
axiom taller_trans : ∀ {x y z : Person}, Taller x y → Taller y z → Taller x z

-- Peter is a man who is taller than Michael.
axiom Peter_man : Man Peter
axiom Peter_taller_Michael : Taller Peter Michael

-- Michael can block any shooting from a person as long as the person does not jump when shooting.
axiom Michael_blocks_if_not_jump : ∀ {y : Person}, ¬ Jumps y → CanBlock Michael y

-- Michael cannot block Windy's shooting.
axiom Michael_cannot_block_Windy : ¬ CanBlock Michael Windy

-- Every shooter who can jump when shooting is a great shooter.
axiom jumpers_are_great : ∀ {y : Person}, Jumps y → Great y

-- From being a taller man, Peter can block Michael.
theorem Peter_blocks_Michael : CanBlock Peter Michael :=
  rule_block_if_taller_men (x := Peter) (y := Michael) Peter_man Michael_man Peter_taller_Michael

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: Uncertain
Prediction: Unknown
Correct: Yes
Total Iterations: 5
