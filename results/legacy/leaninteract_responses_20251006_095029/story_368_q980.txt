Story ID: 368
Example ID: 980
Premises: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.
If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.
People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.
If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.
If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.
Hannah is at Mary's school.
Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.
Conclusion: Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.

==================================================
Iteration 1
==================================================
<lean>
universe u

axiom Person : Type u

-- Predicates
axiom AtMS : Person → Prop
axiom WorkStudentJob : Person → Prop
axiom NeedMoney : Person → Prop
axiom OrderTakeout : Person → Prop
axiom EnjoyDining : Person → Prop
axiom SpendTimeDining : Person → Prop
axiom Picky : Person → Prop

-- Individual
axiom Hannah : Person

-- Premises
axiom prem1 : ∀ x : Person, AtMS x → WorkStudentJob x → NeedMoney x
axiom prem2 : ∀ x : Person, AtMS x → OrderTakeout x → WorkStudentJob x
axiom prem3 : ∀ x : Person, AtMS x → (OrderTakeout x ∨ EnjoyDining x)
axiom prem4 : ∀ x : Person, AtMS x → EnjoyDining x → ¬ Picky x
axiom prem5 : ∀ x : Person, AtMS x → EnjoyDining x → SpendTimeDining x
axiom prem6 : AtMS Hannah
axiom prem7 : WorkStudentJob Hannah ∧ (NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah))

theorem goal :
  AtMS Hannah ∧ ¬ Picky Hannah ∧ SpendTimeDining Hannah := by
  have hAt : AtMS Hannah := prem6
  have hWork : WorkStudentJob Hannah := (And.left prem7)
  have hNeed : NeedMoney Hannah := prem1 Hannah hAt hWork
  have hImp : NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah) := And.right prem7
  have hNotNeed : ¬ NeedMoney Hannah := fun h => (hImp h).right h
  have absurd : False := hNotNeed hNeed
  have hNotPicky : ¬ Picky Hannah := (hImp hNeed).left
  have hSpend : SpendTimeDining Hannah := False.elim absurd
  exact And.intro hAt (And.intro hNotPicky hSpend)
</lean>
ANSWER: True

--- Lean Code ---
universe u

axiom Person : Type u

-- Predicates
axiom AtMS : Person → Prop
axiom WorkStudentJob : Person → Prop
axiom NeedMoney : Person → Prop
axiom OrderTakeout : Person → Prop
axiom EnjoyDining : Person → Prop
axiom SpendTimeDining : Person → Prop
axiom Picky : Person → Prop

-- Individual
axiom Hannah : Person

-- Premises
axiom prem1 : ∀ x : Person, AtMS x → WorkStudentJob x → NeedMoney x
axiom prem2 : ∀ x : Person, AtMS x → OrderTakeout x → WorkStudentJob x
axiom prem3 : ∀ x : Person, AtMS x → (OrderTakeout x ∨ EnjoyDining x)
axiom prem4 : ∀ x : Person, AtMS x → EnjoyDining x → ¬ Picky x
axiom prem5 : ∀ x : Person, AtMS x → EnjoyDining x → SpendTimeDining x
axiom prem6 : AtMS Hannah
axiom prem7 : WorkStudentJob Hannah ∧ (NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah))

theorem goal :
  AtMS Hannah ∧ ¬ Picky Hannah ∧ SpendTimeDining Hannah := by
  have hAt : AtMS Hannah := prem6
  have hWork : WorkStudentJob Hannah := (And.left prem7)
  have hNeed : NeedMoney Hannah := prem1 Hannah hAt hWork
  have hImp : NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah) := And.right prem7
  have hNotNeed : ¬ NeedMoney Hannah := fun h => (hImp h).right h
  have absurd : False := hNotNeed hNeed
  have hNotPicky : ¬ Picky Hannah := (hImp hNeed).left
  have hSpend : SpendTimeDining Hannah := False.elim absurd
  exact And.intro hAt (And.intro hNotPicky hSpend)

--- Lean Verification ---
Success: False
Errors:
  - declaration `goal` contains universe level metavariables at the expression
  NeedMoney.{?u.131} Hannah.{?u.131}
in the declaration body
  have hAt := prem6;
  have hWork := prem7.{u_1, ?u.131, ?u.130, ?u.129}.left;
  have hNeed := prem1 Hannah hAt hWork;
  have hImp := prem7.{?u.168, u_1, u_2, u_1}.right;
  have hNotNeed := fun h => (hImp h).right h;
  have absurd := hNotNeed hNeed;
  have hNotPicky := (hImp hNeed).left;
  have hSpend := False.elim absurd;
  ⟨hAt, ⟨hNotPicky, hSpend⟩⟩

==================================================
Iteration 2
==================================================
<lean>
axiom Person : Type

-- Predicates
axiom AtMS : Person → Prop
axiom WorkStudentJob : Person → Prop
axiom NeedMoney : Person → Prop
axiom OrderTakeout : Person → Prop
axiom EnjoyDining : Person → Prop
axiom SpendTimeDining : Person → Prop
axiom Picky : Person → Prop

-- Individual
axiom Hannah : Person

-- Premises
axiom prem1 : ∀ x : Person, AtMS x → WorkStudentJob x → NeedMoney x
axiom prem2 : ∀ x : Person, AtMS x → OrderTakeout x → WorkStudentJob x
axiom prem3 : ∀ x : Person, AtMS x → (OrderTakeout x ∨ EnjoyDining x)
axiom prem4 : ∀ x : Person, AtMS x → EnjoyDining x → ¬ Picky x
axiom prem5 : ∀ x : Person, AtMS x → EnjoyDining x → SpendTimeDining x
axiom prem6 : AtMS Hannah
axiom prem7 : WorkStudentJob Hannah ∧ (NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah))

theorem goal :
  AtMS Hannah ∧ ¬ Picky Hannah ∧ SpendTimeDining Hannah := by
  have hAt : AtMS Hannah := prem6
  have hWork : WorkStudentJob Hannah := And.left prem7
  have hNeed : NeedMoney Hannah := prem1 Hannah hAt hWork
  have hImp : NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah) := And.right prem7
  have hNotNeed : ¬ NeedMoney Hannah := by
    intro h
    exact (hImp h).right h
  have absurd : False := hNotNeed hNeed
  have hNotPicky : ¬ Picky Hannah := (hImp hNeed).left
  have hSpend : SpendTimeDining Hannah := False.elim absurd
  exact And.intro hAt (And.intro hNotPicky hSpend)
</lean>
ANSWER: True

--- Lean Code ---
axiom Person : Type

-- Predicates
axiom AtMS : Person → Prop
axiom WorkStudentJob : Person → Prop
axiom NeedMoney : Person → Prop
axiom OrderTakeout : Person → Prop
axiom EnjoyDining : Person → Prop
axiom SpendTimeDining : Person → Prop
axiom Picky : Person → Prop

-- Individual
axiom Hannah : Person

-- Premises
axiom prem1 : ∀ x : Person, AtMS x → WorkStudentJob x → NeedMoney x
axiom prem2 : ∀ x : Person, AtMS x → OrderTakeout x → WorkStudentJob x
axiom prem3 : ∀ x : Person, AtMS x → (OrderTakeout x ∨ EnjoyDining x)
axiom prem4 : ∀ x : Person, AtMS x → EnjoyDining x → ¬ Picky x
axiom prem5 : ∀ x : Person, AtMS x → EnjoyDining x → SpendTimeDining x
axiom prem6 : AtMS Hannah
axiom prem7 : WorkStudentJob Hannah ∧ (NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah))

theorem goal :
  AtMS Hannah ∧ ¬ Picky Hannah ∧ SpendTimeDining Hannah := by
  have hAt : AtMS Hannah := prem6
  have hWork : WorkStudentJob Hannah := And.left prem7
  have hNeed : NeedMoney Hannah := prem1 Hannah hAt hWork
  have hImp : NeedMoney Hannah → (¬ Picky Hannah ∧ ¬ NeedMoney Hannah) := And.right prem7
  have hNotNeed : ¬ NeedMoney Hannah := by
    intro h
    exact (hImp h).right h
  have absurd : False := hNotNeed hNeed
  have hNotPicky : ¬ Picky Hannah := (hImp hNeed).left
  have hSpend : SpendTimeDining Hannah := False.elim absurd
  exact And.intro hAt (And.intro hNotPicky hSpend)

--- Lean Verification ---
Success: True

==================================================
Final Result:
==================================================
Ground Truth: True
Prediction: True
Correct: Yes
Total Iterations: 2
