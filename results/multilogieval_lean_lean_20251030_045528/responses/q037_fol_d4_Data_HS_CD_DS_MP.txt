Multi-LogiEval Question with Lean Verification
================================================================================

Logic Type: fol
Depth: d4 (d4_Data)
Rule: HS_CD_DS_MP

Context:
It was the morning of a big game day in town. If the hometown team wins, then fans celebrate in the streets. If fans celebrate in the streets, then local businesses get more customers. If the hometown team loses, then fans feel disappointed. Either the hometown team won or they lost today. The mayor knows that if fans feel disappointed, then fewer people come downtown.

Question:
Local businesses did not get many customers today. Did fewer people come downtown?

================================================================================
Iterations:
================================================================================

--- Iteration 1 ---

LLM Response:
<lean>
axiom Wins : Prop
axiom Celebrate : Prop
axiom MoreCustomers : Prop
axiom Loses : Prop
axiom Disappointed : Prop
axiom FewerDowntown : Prop

axiom win_imp_celebrate : Wins → Celebrate
axiom celebrate_imp_more : Celebrate → MoreCustomers
axiom lose_imp_disappointed : Loses → Disappointed
axiom win_or_lose : Wins ∨ Loses
axiom disappointed_imp_fewer : Disappointed → FewerDowntown
axiom not_more_customers : ¬ MoreCustomers

theorem fewer_people_today : FewerDowntown := by
  have win_imp_more : Wins → MoreCustomers := fun w => celebrate_imp_more (win_imp_celebrate w)
  have not_win : ¬ Wins := fun w => not_more_customers (win_imp_more w)
  have l : Loses := Or.elim win_or_lose (fun w => False.elim (not_win w)) (fun l => l)
  have d : Disappointed := lose_imp_disappointed l
  exact disappointed_imp_fewer d
</lean>

ANSWER: Yes

Extracted Lean Code:
----------------------------------------
axiom Wins : Prop
axiom Celebrate : Prop
axiom MoreCustomers : Prop
axiom Loses : Prop
axiom Disappointed : Prop
axiom FewerDowntown : Prop

axiom win_imp_celebrate : Wins → Celebrate
axiom celebrate_imp_more : Celebrate → MoreCustomers
axiom lose_imp_disappointed : Loses → Disappointed
axiom win_or_lose : Wins ∨ Loses
axiom disappointed_imp_fewer : Disappointed → FewerDowntown
axiom not_more_customers : ¬ MoreCustomers

theorem fewer_people_today : FewerDowntown := by
  have win_imp_more : Wins → MoreCustomers := fun w => celebrate_imp_more (win_imp_celebrate w)
  have not_win : ¬ Wins := fun w => not_more_customers (win_imp_more w)
  have l : Loses := Or.elim win_or_lose (fun w => False.elim (not_win w)) (fun l => l)
  have d : Disappointed := lose_imp_disappointed l
  exact disappointed_imp_fewer d
----------------------------------------

Lean Verification:
  Success: True

================================================================================
Final Result:
================================================================================
Ground Truth: Yes
Prediction: Yes
Correct: ✓ Yes
Total Iterations: 1
Final Lean: ✓ Success
