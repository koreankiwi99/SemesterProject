Multi-LogiEval Question with Lean Verification
================================================================================

Logic Type: pl
Depth: d5 (d5_Data)
Rule: HS_MT_DS_MP_MP

Context:
Jessica set a goal to run a marathon. She learned that if she trained consistently, she could increase her endurance and stamina. Jessica knew that if her endurance improved, she could complete the 26.2 mile marathon. To complement her training, Jessica made sure she either trained regularly, or ate nutritious foods, or did both. Eating nutritious foods gave Jessica more steady energy for her workouts. With this extra energy, Jessica found she could train harder while staying injury-free on her road to marathon success.

Question:
If Jessica does not complete the marathon, then does she stay injury-free during training?

================================================================================
Iterations:
================================================================================

--- Iteration 1 ---

LLM Response:
<lean>
axiom TrainConsistent : Prop
axiom EnduranceImproved : Prop
axiom StaminaImproved : Prop
axiom CompleteMarathon : Prop
axiom EatsNutritious : Prop
axiom MoreEnergy : Prop
axiom TrainHarder : Prop
axiom InjuryFree : Prop

-- If she trained consistently, she could increase her endurance and stamina.
axiom premise1 : TrainConsistent → (EnduranceImproved ∧ StaminaImproved)
-- If her endurance improved, she could complete the marathon.
axiom premise2 : EnduranceImproved → CompleteMarathon
-- She either trained regularly, or ate nutritious foods, or both.
axiom premise3 : TrainConsistent ∨ EatsNutritious
-- Eating nutritious foods gave her more steady energy.
axiom premise4 : EatsNutritious → MoreEnergy
-- With this extra energy, she could train harder while staying injury-free.
axiom premise5 : MoreEnergy → (TrainHarder ∧ InjuryFree)

theorem goal : (¬CompleteMarathon) → InjuryFree := by
  intro hNotC
  -- From ¬Complete and (Endurance → Complete), get ¬Endurance
  have hNotE : ¬EnduranceImproved := by
    intro hE
    exact hNotC (premise2 hE)
  -- From ¬Endurance and (Train → Endurance ∧ Stamina), get ¬Train
  have hNotT : ¬TrainConsistent := by
    intro hT
    have hE : EnduranceImproved := (premise1 hT).left
    exact hNotE hE
  -- From (Train ∨ Eats) and ¬Train, deduce Eats
  have hEat : EatsNutritious := by
    cases premise3 with
    | inl hT => exact False.elim (hNotT hT)
    | inr hEats => exact hEats
  -- From Eats, get Energy
  have hEnergy : MoreEnergy := premise4 hEat
  -- From Energy, get InjuryFree
  exact (premise5 hEnergy).right
</lean>
ANSWER: Yes

Extracted Lean Code:
----------------------------------------
axiom TrainConsistent : Prop
axiom EnduranceImproved : Prop
axiom StaminaImproved : Prop
axiom CompleteMarathon : Prop
axiom EatsNutritious : Prop
axiom MoreEnergy : Prop
axiom TrainHarder : Prop
axiom InjuryFree : Prop

-- If she trained consistently, she could increase her endurance and stamina.
axiom premise1 : TrainConsistent → (EnduranceImproved ∧ StaminaImproved)
-- If her endurance improved, she could complete the marathon.
axiom premise2 : EnduranceImproved → CompleteMarathon
-- She either trained regularly, or ate nutritious foods, or both.
axiom premise3 : TrainConsistent ∨ EatsNutritious
-- Eating nutritious foods gave her more steady energy.
axiom premise4 : EatsNutritious → MoreEnergy
-- With this extra energy, she could train harder while staying injury-free.
axiom premise5 : MoreEnergy → (TrainHarder ∧ InjuryFree)

theorem goal : (¬CompleteMarathon) → InjuryFree := by
  intro hNotC
  -- From ¬Complete and (Endurance → Complete), get ¬Endurance
  have hNotE : ¬EnduranceImproved := by
    intro hE
    exact hNotC (premise2 hE)
  -- From ¬Endurance and (Train → Endurance ∧ Stamina), get ¬Train
  have hNotT : ¬TrainConsistent := by
    intro hT
    have hE : EnduranceImproved := (premise1 hT).left
    exact hNotE hE
  -- From (Train ∨ Eats) and ¬Train, deduce Eats
  have hEat : EatsNutritious := by
    cases premise3 with
    | inl hT => exact False.elim (hNotT hT)
    | inr hEats => exact hEats
  -- From Eats, get Energy
  have hEnergy : MoreEnergy := premise4 hEat
  -- From Energy, get InjuryFree
  exact (premise5 hEnergy).right
----------------------------------------

Lean Verification:
  Success: True

================================================================================
Final Result:
================================================================================
Ground Truth: Yes
Prediction: Yes
Correct: ✓ Yes
Total Iterations: 1
Final Lean: ✓ Success
